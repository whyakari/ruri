#!/bin/sh
#
# SPDX-License-Identifier: MIT
#
# This file is part of ruri, with ABSOLUTELY NO WARRANTY.
#
# MIT License
#
# Copyright (c) 2022-2024 Moe-hacker
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
error() {
  printf "$@\n"
  exit 1
}
init() {
  printf "checking for make... "
  if ! command -v make; then
    error "not found"
  fi
  printf "checking for strip... "
  if ! command -v strip; then
    error "not found"
  fi
  printf "checking for compiler... "
  if [ !$CC ]; then
    if [ ! $(which cc) ]; then
      error "not found"
    fi
    CC=$(realpath $(which cc))
    export CC=${CC##*/}
  fi
  printf "$CC\n"
  printf "checking whether the compiler supports GNU C99... "
  (echo "int main(){}" | $CC -x c -o /dev/null -std=gnu99 -) >/dev/null 2>&1 && printf "ok\n" || error "no"
  if [ $STATIC_COMPILE ]; then
    printf "checking whether the compiler supports -static compile... "
    echo "int main(){}" | $CC -static -x c -o /dev/null -std=gnu99 - >/dev/null 2>&1 && printf "ok\n" || error "no"
  fi
}
test_and_add_cflag() {
  printf "checking whether the compiler supports $1... "
  if echo "int main(void){}" | $CC $1 -Werror -x c -o /dev/null - >/dev/null 2>&1; then
    printf "ok\n" && export CFLAGS="$CFLAGS $1"
  else
    printf "no\n"
  fi
}
test_and_add_ldflag() {
  printf "checking for $1... "
  if [ $STATIC_COMPILE ]; then
    if echo "int main(){}" | $CC -static -x c -o /dev/null - $1 >/dev/null 2>&1; then
      printf "ok\n" && export LD_FLAGS="$LD_FLAGS $1"
    else
      printf "no\n"
    fi
  else
    if echo "int main(){}" | $CC -x c -o /dev/null - $1 >/dev/null 2>&1; then
      printf "ok\n" && export LD_FLAGS="$LD_FLAGS $1"
    else
      printf "no\n"
    fi
  fi
}
check_header() {
  printf "checking for header $i... "
  printf "#include <$1>\nint main(){}" | $CC -x c -o /dev/null - >/dev/null 2>&1 && printf "ok\n" || error "not found"
}
check_lib() {
  printf "checking for lib $1... "
  if [ ! -e $(clang -print-file-name=$1) ]; then
    error "not found!\033[0m"
  fi
  printf "found\n"
}
default_cflag() {
  test_and_add_cflag "-ftrivial-auto-var-init=pattern"
  test_and_add_cflag "-fcf-protection=full"
  test_and_add_cflag "-flto"
  test_and_add_cflag "-fPIE"
  test_and_add_cflag "-pie"
  test_and_add_cflag "-Wl,-z,relro"
  test_and_add_cflag "-Wl,-z,noexecstack"
  test_and_add_cflag "-Wl,-z,now"
  test_and_add_cflag "-fstack-protector-all"
  test_and_add_cflag "-fstack-clash-protection"
  test_and_add_cflag "-mshstk"
  test_and_add_cflag "-D_FORTIFY_SOURCE=3"
  test_and_add_cflag "-Wno-unused-result"
  test_and_add_cflag "-O2"
  test_and_add_cflag "-Wl,--build-id=sha1"
  test_and_add_cflag "-ffunction-sections"
  test_and_add_cflag "-fdata-sections"
  test_and_add_cflag "-Wl,--gc-sections"
  if [ $STATIC_COMPILE ]; then
    test_and_add_cflag "-static"
  fi
  test_and_add_ldflag "-lcap"
  test_and_add_ldflag "-lseccomp"
}
dev_cflag() {
  test_and_add_cflag "-ggdb"
  test_and_add_cflag "-O0"
  test_and_add_cflag "-fno-omit-frame-pointer"
  test_and_add_cflag "-Wl,-z,norelro"
  test_and_add_cflag "-Wl,-z,execstack"
  test_and_add_cflag "-fno-stack-protector"
  test_and_add_cflag "-Wall"
  test_and_add_cflag "-Wextra"
  test_and_add_cflag "-pedantic"
  test_and_add_cflag "-Wconversion"
  test_and_add_cflag "-Wno-newline-eof"
  test_and_add_cflag "-Wno-gnu-zero-variadic-macro-arguments"
  test_and_add_cflag "-fsanitize=address"
  test_and_add_cflag "-Wl,--build-id=sha1"
  test_and_add_cflag "-ffunction-sections"
  test_and_add_cflag "-fdata-sections"
  test_and_add_cflag "-Wl,--gc-sections"
  if [ $STATIC_COMPILE ]; then
    test_and_add_cflag "-static"
  fi
  test_and_add_ldflag "-lcap"
  test_and_add_ldflag "-lseccomp"
}
check_headers_and_libs() {
  # Check system headers.
  for i in fcntl.h sys/ioctl.h sys/mount.h sys/socket.h unistd.h pthread.h; do
    check_header $i
  done
  # Check library headers.
  for i in sys/capability.h seccomp.h; do
    check_header $i
  done
  # Check library.
  if [ $STATIC_COMPILE ]; then
    for i in libc.a libcap.a libseccomp.a; do
      check_lib $i
    done
  else
    for i in libcap.so libseccomp.so; do
      check_lib $i
    done
  fi
}
show_help() {
  echo "Usage: ./configure [OPTION]..."
  echo "    -h, --help          show help"
  echo "    -s, --static        compile static binary"
  echo "    -d, --dev           compile dev version"
}
while [ $1 ]; do
  case $1 in
  "-h" | "--help") show_help && exit ;;
  "-s" | "--static") export STATIC_COMPILE=true ;;
  "-d" | "--dev") export DEV_BUILD=true ;;
  esac
  shift
done
init
check_headers_and_libs
if [ ! $DEV_BUILD ]; then
  default_cflag
else
  dev_cflag
fi
printf "create config.mk... "
echo "CFLAGS = $CFLAGS" >config.mk
echo "LD_FLAGS = $LD_FLAGS" >>config.mk
echo "CC = $CC" >>config.mk
printf "ok\n"
